name: Create release

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    if: github.event_name != 'push' || (!startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt install qtbase5-dev

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest -C ${{ env.BUILD_TYPE }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt install qtbase5-dev

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

      - name: Package artifacts
        run: |
          mkdir -p release
          # Copy the memsc binary
          cp ${{ github.workspace }}/build/memsc release/ || echo "Warning: memsc not found"
          tar czf memsc-${{ github.ref_name }}.tar.gz -C release .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: memsc-${{ github.ref_name }}.tar.gz
          asset_name: memsc-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
